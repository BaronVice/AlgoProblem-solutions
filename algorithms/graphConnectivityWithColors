#include <bits/stdc++.h>

using namespace std;

// Списки смежности
vector<vector<int>> g;
// Посещенные (здесь заодно буду хранить номер компоненты)
vector<int> visited;
// Количество вершин и ребер
int n, m;
// Это номер компоненты связности
int color = 0;

void dfs(int point){
    // Заходим в вершину и присваиваем ей текущий номер
    visited[point] = color;
    // Для каждой вершины, в которую мы можем прийти из текущей: заходим в нее, если она без номера
    for (auto el : g[point]) if (visited[el] == 0) {
        dfs(el);
    }
}

int main(){
    cin >> n >> m;
    // В задачах обычно счет вершин начинается с 1 (но в массивах счет с 0). Поэтому сделаем resize не на n, а на n+1
    g.resize(n+1);
    visited.resize(n+1);

    while(m--){
        // Между какими вершинами есть ребро
        int from, to; cin >> from >> to;
        g[from].push_back(to);
        g[to].push_back(from);
    } 

    /*
    Идея: буду пробовать запускать dfs от каждой вершины;
    Если вершина посещена - то она уже лежит в какой-то компоненте связности. Иначе эта компонента, которую еще не обходил  
    */
    for (int i = 1; i < n+1; i++){
        if (!visited[i]){
            // Новая компонента - следующий номер
            color++;
            dfs(i);
        }
    }

    for (int i = 1; i < n+1; i++){
        cout << visited[i] << ' ';
    }

    return 0;
}
