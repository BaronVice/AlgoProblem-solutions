""" Идея задачи: бинарный поиск по формуле """


# Функция, с которой будем определять минимальную стоимость при выбранном k товаров
def count_cost(picked_k):
    # Получаем новые стоимости в соответствии с формулой
    new_costs = [costs[i] + (i+1) * picked_k for i in range(n)]
    # Чтобы взять первые picked_k минимальных значений, отсортируем массив стоимостей
    # По возрастанию (от наименьшего к наибольшему)
    new_costs.sort()
    
    # Считаем сумму первых picked_k товаров
    cost_with_picked_k = sum(new_costs[i] for i in range(picked_k))
    return cost_with_picked_k


n, S = map(int, input().split())
costs = tuple(map(int, input().split()))

# Изначально k и T равны 0
k, T = 0, 0
# Обозначим минимальное и максимальное количество товаров, которые может купить Сахир:
# Если у Сахира бюджет меньше чем какой-либо товар, то он купит 0 вещей (left = 0)
# Или у него может быть достаточно денег, чтобы скупить весь рынок (right = n+1)
left, right = 0, n+1

# Запускаем бинарный поиск
while left + 1 < right:
    mid = (left + right) // 2

    # Считаем минимальную стоимость от выбранного количества товаров
    current_cost = count_cost(mid)
    # Если уложились в бюджет
    if current_cost <= S:
        # То мы нашли большее k товаров, чем предыдущее (также меняем стоимость)
        k, T = mid, current_cost
        # Можем попробовать взять значение побольше
        left = mid
    else:
        # Иначе пробуем взять меньшее количество товаров
        right = mid

print(k, T)